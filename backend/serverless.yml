service: emojiplace-backend

plugins:
  - serverless-iam-roles-per-function

package:
  individually: true
  excludeDevDependencies: true

provider:
  name: aws
  runtime: nodejs18.x # Using a recent, stable Node.js runtime
  region: us-west-1
  stage: ${opt:stage, 'dev'}
  profile: default # Using your 'default' AWS CLI profile
  timeout: 29 # Best practice: Lambda timeout slightly less than API Gateway's 30s max.
  versionFunctions: true # Required for provisioned concurrency
  logRetentionInDays: 14 # Set a retention period for logs

  # Provider-level configuration for httpApi to enable CORS for all functions
  httpApi:
    cors: true # API now returns data directly, so it needs to handle CORS.

  # Environment variables that will be available to all your Lambda functions
  environment:
    DYNAMODB_PIXEL_TABLE: PixelTable-${self:provider.stage}
    DYNAMODB_CONNECTIONS_TABLE: ConnectionsTable-${self:provider.stage}
    DYNAMODB_COOLDOWN_TABLE: CooldownTable-${self:provider.stage}
    DYNAMODB_AGENT_MEMORY_TABLE: AgentMemoryTable-${self:provider.stage}
    DYNAMODB_AGENT_MESSAGES_TABLE: AgentMessagesTable-${self:provider.stage}
    S3_CHUNK_BUCKET: emojiplace-chunks-${self:provider.stage}
    AGENT_EVENT_LOG_GROUP: /aws/lambda/AgentEvents-${self:provider.stage}
    CLOUDFRONT_URL: !GetAtt ChunksCloudFront.DomainName
    # This will be automatically set by the framework after deployment
    WEBSOCKET_API_ENDPOINT:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref WebsocketsApi
          - ".execute-api.us-west-1.amazonaws.com/"
          - ${self:provider.stage}
    # API keys for LLM providers. These are loaded from the .env file.
    ANTHROPIC_API_KEY: ${env:ANTHROPIC_API_KEY}
    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}

functions:
  getPixelRegion:
    handler: src/handlers.getPixelRegion
    events:
      - httpApi:
          path: /api/pixels/region/{x}/{y}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
          - "s3:GetObjectVersion"
        Resource: "arn:aws:s3:::${self:provider.environment.S3_CHUNK_BUCKET}/*"
      - Effect: "Allow"
        Action:
          - "s3:ListBucket"
        Resource: "arn:aws:s3:::${self:provider.environment.S3_CHUNK_BUCKET}"

  getRecentMessages:
    handler: src/handlers.getRecentMessagesHttp
    events:
      - httpApi:
          path: /api/messages/recent
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:Scan"
        Resource: 
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}/index/*"

  connectionHandler:
    handler: src/handlers.handleConnect
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CONNECTIONS_TABLE}"

  disconnectionHandler:
    handler: src/handlers.handleDisconnect
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CONNECTIONS_TABLE}"

  messageHandler:
    handler: src/handlers.handleMessage
    events:
      - websocket:
          route: $default
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "execute-api:ManageConnections"
        Resource:
          - "arn:aws:execute-api:*:*:**/@connections/*"
      - Effect: "Allow"
        Action:
          - "dynamodb:Query"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:Scan"
          - "dynamodb:DeleteItem"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_COOLDOWN_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PIXEL_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_CONNECTIONS_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "s3:PutObject"
          - "s3:GetObject"
        Resource: "arn:aws:s3:::${self:provider.environment.S3_CHUNK_BUCKET}/*"
      - Effect: "Allow"
        Action:
          - "s3:ListBucket"
        Resource: "arn:aws:s3:::${self:provider.environment.S3_CHUNK_BUCKET}"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
        Resource: "arn:aws:logs:${self:provider.region}:*:log-group:${self:provider.environment.AGENT_EVENT_LOG_GROUP}:*"
      - Effect: "Allow"
        Action: "logs:CreateLogGroup"
        Resource: "arn:aws:logs:${self:provider.region}:*:*"

  agentOrchestrator:
    handler: src/handlers.agentOrchestrator
    events:
      - schedule: rate(5 minutes)
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
        Resource: 
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MEMORY_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}/index/*"
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
          - "s3:PutObject"
        Resource: "arn:aws:s3:::${self:provider.environment.S3_CHUNK_BUCKET}/*"
      - Effect: "Allow"
        Action:
          - "s3:ListBucket"
        Resource: "arn:aws:s3:::${self:provider.environment.S3_CHUNK_BUCKET}"
      - Effect: "Allow"
        Action:
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
        Resource: "arn:aws:logs:${self:provider.region}:*:log-group:${self:provider.environment.AGENT_EVENT_LOG_GROUP}:*"
      - Effect: "Allow"
        Action: "logs:CreateLogGroup"
        Resource: "arn:aws:logs:${self:provider.region}:*:*"
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource:
          - Fn::GetAtt: [MessageHandlerLambdaFunction, Arn]

# Define our DynamoDB table without the stream
resources:
  Resources:
    PixelTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_PIXEL_TABLE}
        AttributeDefinitions:
          - AttributeName: xy
            AttributeType: S
        KeySchema:
          - AttributeName: xy
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    CooldownTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_COOLDOWN_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AgentMemoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_AGENT_MEMORY_TABLE}
        AttributeDefinitions:
          - AttributeName: agentId
            AttributeType: S
        KeySchema:
          - AttributeName: agentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AgentMessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_AGENT_MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: messageId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    ChunksBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_CHUNK_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - 'https://emojiplace.vercel.app'
                - 'http://localhost:3000'
              AllowedMethods:
                - GET
              AllowedHeaders:
                - '*'
    ChunksCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: 'EmojiPlace Chunks Distribution - Forcing update'
          Enabled: true
          Origins:
            - DomainName: !GetAtt ChunksBucket.RegionalDomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OAI}"
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            # Use our own explicit policies instead of managed ones
            OriginRequestPolicyId: !Ref ChunksOriginRequestPolicy
            CachePolicyId: !Ref ChunksCachePolicy
          DefaultRootObject: ''
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
    # This new resource creates the Origin Access Identity (OAI)
    OAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for EmojiPlace Chunks Bucket
    # This new resource adds a policy to the S3 bucket
    # It grants the OAI permission to read objects (the chunks)
    ChunksBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ChunksBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: !Sub "arn:aws:s3:::${ChunksBucket}/*"
              Principal:
                AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OAI}"
    ChunksOriginRequestPolicy:
      Type: AWS::CloudFront::OriginRequestPolicy
      Properties:
        OriginRequestPolicyConfig:
          Name: Chunks-CORS-Policy-${self:provider.stage}
          Comment: Forwards Origin header for S3 CORS
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Origin
          CookiesConfig:
            CookieBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
    ChunksCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          Name: Chunks-Cache-Policy-${self:provider.stage}
          Comment: Caching policy for S3 chunks
          DefaultTTL: 86400 # 1 day
          MaxTTL: 31536000 # 1 year
          MinTTL: 1 # 1 second
          ParametersInCacheKeyAndForwardedToOrigin:
            CookiesConfig:
              CookieBehavior: none
            HeadersConfig:
              HeaderBehavior: none
            QueryStringsConfig:
              QueryStringBehavior: none
            EnableAcceptEncodingBrotli: true
            EnableAcceptEncodingGzip: true

# We can add custom AWS resources here later, such as VPC and Security Group
# configurations needed for the ElastiCache instance.
# resources:
#   Resources:
#     ... 