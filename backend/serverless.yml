service: emojiplace-backend

package:
  individually: true
  excludeDevDependencies: true

provider:
  name: aws
  runtime: nodejs18.x # Using a recent, stable Node.js runtime
  region: us-west-1
  stage: ${opt:stage, 'dev'}
  profile: default # Using your 'default' AWS CLI profile
  timeout: 29 # Best practice: Lambda timeout slightly less than API Gateway's 30s max.
  versionFunctions: true # Required for provisioned concurrency
  logRetentionInDays: 14 # Set a retention period for logs

  # Provider-level configuration for httpApi to enable CORS for all functions
  httpApi:
    cors: true

  # Environment variables that will be available to all your Lambda functions
  environment:
    DYNAMODB_PIXEL_TABLE: PixelTable-${self:provider.stage}
    DYNAMODB_CONNECTIONS_TABLE: ConnectionsTable-${self:provider.stage}
    DYNAMODB_COOLDOWN_TABLE: CooldownTable-${self:provider.stage}
    S3_CHUNK_BUCKET: emojiplace-chunks-${self:provider.stage}
    CLOUDFRONT_URL: !GetAtt ChunksCloudFront.DomainName
    # This will be automatically set by the framework after deployment
    WEBSOCKET_API_ENDPOINT:
      Fn::Join:
        - ""
        - - "https://"
          - !Ref WebsocketsApi
          - ".execute-api.us-west-1.amazonaws.com/"
          - ${self:provider.stage}

  # IAM permissions for your Lambda functions.
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:DeleteLogGroup"
            - "logs:TagResource"
          Resource: "arn:aws:logs:*:*:*"
        - Effect: "Allow"
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:BatchWriteItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/PixelTable-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/ConnectionsTable-${self:provider.stage}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/CooldownTable-${self:provider.stage}"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::emojiplace-chunks-${self:provider.stage}/*"
            - "arn:aws:s3:::emojiplace-chunks-${self:provider.stage}"

functions:
  getPixelRegion:
    handler: src/handlers.getPixelRegion
    events:
      - httpApi:
          # Note: The new handler redirects, so we only need x/y
          path: /api/pixels/region/{x}/{y}
          method: get

  # WebSocket Handlers
  connectionHandler:
    handler: src/handlers.handleConnect
    events:
      - websocket:
          route: $connect

  disconnectionHandler:
    handler: src/handlers.handleDisconnect
    events:
      - websocket:
          route: $disconnect

  messageHandler:
    handler: src/handlers.handleMessage
    events:
      - websocket:
          route: $default

# Define our DynamoDB table without the stream
resources:
  Resources:
    PixelTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_PIXEL_TABLE}
        AttributeDefinitions:
          - AttributeName: xy
            AttributeType: S
        KeySchema:
          - AttributeName: xy
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    CooldownTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_COOLDOWN_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ChunksBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_CHUNK_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - DELETE
                - HEAD
              AllowedHeaders:
                - '*'
    ChunksCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: !GetAtt ChunksBucket.RegionalDomainName # Use regional domain for performance
              Id: S3Origin
              S3OriginConfig:
                # This is the crucial part: sets up secure access for CloudFront
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OAI}"
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          DefaultRootObject: ''
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
    # This new resource creates the Origin Access Identity (OAI)
    OAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for EmojiPlace Chunks Bucket
    # This new resource adds a policy to the S3 bucket
    # It grants the OAI permission to read objects (the chunks)
    ChunksBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ChunksBucket
        PolicyDocument:
          Statement:
            - Action: s3:GetObject
              Effect: Allow
              Resource: !Sub "arn:aws:s3:::${ChunksBucket}/*"
              Principal:
                CanonicalUser: !GetAtt OAI.S3CanonicalUserId

# We can add custom AWS resources here later, such as VPC and Security Group
# configurations needed for the ElastiCache instance.
# resources:
#   Resources:
#     ... 